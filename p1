import requests
import logging
import time
import subprocess
import json

# Configuration
PRIMARY_ARTIFACTORY_URL = 'https://artifa.com/artifactory'
DR_ARTIFACTORY_URL = 'https://dr.artifa.com/artifactory'
PRIMARY_API_ENDPOINT = '/api/repositories?type=local'
DR_API_ENDPOINT = '/api/repositories?type=local'
AUTH = ('admin', 'password')  # Replace 'password' with the actual password
REPO_KEYS_FILE = 'repo_keys.txt'
BASE_URL = 'https://artifacts.ica.com/artifactory/'  # Base URL for updating repositories

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def migrate_repository(repo_key, target_url):
    start_time = time.time()
    post_response = requests.post('{}/api/federation/migrate/{}'.format(target_url, repo_key), auth=AUTH)
    elapsed_time = time.time() - start_time

    if post_response.status_code == 200:
        logging.info("Migration successful for repo_key: {} to {}".format(repo_key, target_url))
    else:
        logging.error("Migration failed for repo_key: {} to {}".format(repo_key, target_url))
        logging.error("Response content: {}".format(post_response.content))

    logging.info("Time taken for migrating {}: {:.2f} seconds".format(repo_key, elapsed_time))
    return post_response.status_code == 200

def check_sync(repo_key, target_url):
    curl_command = 'curl -s -u {}:{} "{}/api/federation/status/repo/{}"'.format(AUTH[0], AUTH[1], target_url, repo_key)
    output = subprocess.check_output(curl_command, shell=True)
    response_json = json.loads(output.decode('utf-8'))

    # Assuming 'mirrorEventsStatusinfo' is the key containing sync status
    sync_status = response_json.get('mirrorEventsStatusinfo', [{}])[0].get('status', 'UNKNOWN')
    return sync_status

def configure_repository(repo_key):
    # Configure the repository as federated with the provided URL
    json_data = json.dumps({
        "rclass": "federated",
        "members": [
            {"url": "https://artifacts.ica.com/artifactory/{}".format(repo_key)}
        ]
    })
    
    url = "{}{}".format(BASE_URL, repo_key)
    headers = {"Content-Type": "application/json"}
    response = requests.put(url, data=json_data, headers=headers, auth=AUTH)
    
    if response.status_code == 200:
        logging.info("Repository {} updated successfully.".format(repo_key))
    else:
        logging.error("Failed to update repository {}. Status code: {}".format(repo_key, response.status_code))
        logging.error("Response content: {}".format(response.content))

def migrate_repositories_from_file():
    try:
        with open(REPO_KEYS_FILE, 'r') as f:
            repo_keys = [line.strip() for line in f if line.strip()]
    except IOError:
        logging.error("Failed to read repository keys from file: {}".format(REPO_KEYS_FILE))
        return

    if not repo_keys:
        logging.error("No repository keys found in file to migrate.")
        return

    for repo_key in repo_keys:
        configure_repository(repo_key)
        if migrate_repository(repo_key, PRIMARY_ARTIFACTORY_URL):
            logging.info("Initial migration to primary Artifactory completed for repo_key: {}".format(repo_key))
        if migrate_repository(repo_key, DR_ARTIFACTORY_URL):
            logging.info("Migration to DR Artifactory completed for repo_key: {}".format(repo_key))

    logging.info("Checking synchronization status for all repositories...")
    for repo_key in repo_keys:
        primary_sync_status = check_sync(repo_key, PRIMARY_ARTIFACTORY_URL)
        dr_sync_status = check_sync(repo_key, DR_ARTIFACTORY_URL)
        logging.info("Sync status for repo_key {}: Primary: {}, DR: {}".format(repo_key, primary_sync_status, dr_sync_status))

def main():
    migrate_repositories_from_file()

if __name__ == '__main__':
    main()
