import requests
import logging
import time

# Configuration
ARTIFACTORY_URL = 'https://artifa.com/artifactory'
API_ENDPOINT = '/api/repositories?type=local'
AUTH = ('admin', 'password')  # Replace 'password' with the actual password
REPO_KEYS_FILE = 'repo_keys.txt'

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def fetch_and_save_repo_keys():
    response = requests.get('{}{}'.format(ARTIFACTORY_URL, API_ENDPOINT), auth=AUTH)
    if response.status_code == 200:
        repo_keys = [repo['key'] for repo in response.json()]
        with open(REPO_KEYS_FILE, 'w') as f:
            for key in repo_keys:
                f.write('{}\n'.format(key))
        logging.info("Repository keys have been saved to {}".format(REPO_KEYS_FILE))
    else:
        logging.error("Failed to fetch repository keys. Status code: {}".format(response.status_code))
        logging.error("Response content: {}".format(response.content))

def migrate_repository(repo_key):
    start_time = time.time()
    post_response = requests.post('{}/api/federation/migrate/{}'.format(ARTIFACTORY_URL, repo_key), auth=AUTH)
    elapsed_time = time.time() - start_time

    if post_response.status_code == 200:
        logging.info("Migration successful for repo_key: {}".format(repo_key))
    else:
        logging.error("Migration failed for repo_key: {}".format(repo_key))
        logging.error("Response content: {}".format(post_response.content))

    logging.info("Time taken for migrating {}: {:.2f} seconds".format(repo_key, elapsed_time))

def migrate_repositories_from_file():
    try:
        with open(REPO_KEYS_FILE, 'r') as f:
            repo_keys = [line.strip() for line in f if line.strip()]
    except IOError:
        logging.error("Failed to read repository keys from file: {}".format(REPO_KEYS_FILE))
        return

    if not repo_keys:
        logging.error("No repository keys found in file to migrate.")
        return

    for repo_key in repo_keys:
        migrate_repository(repo_key)

def main():
    fetch_and_save_repo_keys()
    migrate_repositories_from_file()

if __name__ == '__main__':
    main()
