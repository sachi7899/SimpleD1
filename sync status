import json
import subprocess

def check_sync(repo_key):
    curl_command = 'curl -s -u admin:<passwd> "{}/api/federation/status/repo/{}"'.format(ARTIFACTORY_URL, repo_key)
    output = subprocess.check_output(curl_command, shell=True)
    response_json = json.loads(output.decode('utf-8'))

    # Assuming 'mirrorEventsStatusinfo' is the key containing sync status
    sync_status = response_json.get('mirrorEventsStatusinfo', [{}])[0].get('status', 'UNKNOWN')
    return sync_status



import requests
import logging
import time
import subprocess
import json

# Configuration
ARTIFACTORY_URL = 'https://artifa.com/artifactory'
API_ENDPOINT = '/api/repositories?type=local'
AUTH = ('admin', 'password')  # Replace 'password' with the actual password
REPO_KEYS_FILE = 'repo_keys.txt'

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def migrate_repository(repo_key):
    start_time = time.time()
    post_response = requests.post('{}/api/federation/migrate/{}'.format(ARTIFACTORY_URL, repo_key), auth=AUTH)
    elapsed_time = time.time() - start_time

    if post_response.status_code == 200:
        logging.info("Migration successful for repo_key: {}".format(repo_key))
    else:
        logging.error("Migration failed for repo_key: {}".format(repo_key))
        logging.error("Response content: {}".format(post_response.content))

    logging.info("Time taken for migrating {}: {:.2f} seconds".format(repo_key, elapsed_time))
    return post_response.status_code == 200

def check_sync(repo_key):
    curl_command = 'curl -s -u {}:{} "{}/api/federation/status/repo/{}"'.format(AUTH[0], AUTH[1], ARTIFACTORY_URL, repo_key)
    output = subprocess.check_output(curl_command, shell=True)
    response_json = json.loads(output.decode('utf-8'))

    # Assuming 'mirrorEventsStatusinfo' is the key containing sync status
    sync_status = response_json.get('mirrorEventsStatusinfo', [{}])[0].get('status', 'UNKNOWN')
    return sync_status

def migrate_repositories_from_file():
    try:
        with open(REPO_KEYS_FILE, 'r') as f:
            repo_keys = [line.strip() for line in f if line.strip()]
    except IOError:
        logging.error("Failed to read repository keys from file: {}".format(REPO_KEYS_FILE))
        return

    if not repo_keys:
        logging.error("No repository keys found in file to migrate.")
        return

    for repo_key in repo_keys:
        if migrate_repository(repo_key):
            sync_status = check_sync(repo_key)
            logging.info("Sync status for repo_key {}: {}".format(repo_key, sync_status))

def main():
    migrate_repositories_from_file()

if __name__ == '__main__':
    main()
